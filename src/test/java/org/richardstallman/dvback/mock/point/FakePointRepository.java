package org.richardstallman.dvback.mock.point;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import lombok.extern.slf4j.Slf4j;
import org.richardstallman.dvback.domain.point.domain.PointDomain;
import org.richardstallman.dvback.domain.point.repository.PointRepository;

@Slf4j
public class FakePointRepository implements PointRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<PointDomain> data = new ArrayList<>();

  @Override
  public PointDomain save(PointDomain pointDomain) {
    if (pointDomain.getPointId() == null || pointDomain.getPointId() == 0) {
      PointDomain savedData =
          PointDomain.builder()
              .pointId(autoGeneratedId.incrementAndGet())
              .userId(pointDomain.getUserId())
              .balance(pointDomain.getBalance())
              .build();

      data.add(savedData);
      return savedData;
    }
    data.removeIf(item -> Objects.equals(item.getPointId(), pointDomain.getPointId()));
    data.add(pointDomain);
    return pointDomain;
  }

  @Override
  public PointDomain findByUserId(Long userId) {
    return data.stream()
        .filter(item -> Objects.equals(item.getUserId(), userId))
        .findFirst()
        .orElse(null);
  }
}
