package org.richardstallman.dvback.mock.point;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import lombok.extern.slf4j.Slf4j;
import org.richardstallman.dvback.domain.point.domain.PointTransactionDomain;
import org.richardstallman.dvback.domain.point.repository.transaction.PointTransactionRepository;

@Slf4j
public class FakePointTransactionRepository implements PointTransactionRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<PointTransactionDomain> data = new ArrayList<>();

  @Override
  public PointTransactionDomain save(PointTransactionDomain pointTransactionDomain) {
    if (pointTransactionDomain.getPointTransactionId() == null
        || pointTransactionDomain.getPointTransactionId() == 0) {
      PointTransactionDomain savedData =
          PointTransactionDomain.builder()
              .pointTransactionId(autoGeneratedId.incrementAndGet())
              .userId(pointTransactionDomain.getUserId())
              .amount(pointTransactionDomain.getAmount())
              .pointTransactionType(pointTransactionDomain.getPointTransactionType())
              .description(pointTransactionDomain.getDescription())
              .build();

      data.add(savedData);
      return savedData;
    }
    data.removeIf(
        item ->
            Objects.equals(
                item.getPointTransactionId(), pointTransactionDomain.getPointTransactionId()));
    data.add(pointTransactionDomain);
    return pointTransactionDomain;
  }

  @Override
  public List<PointTransactionDomain> findByUserId(Long userId) {
    return data.stream().filter(item -> Objects.equals(item.getUserId(), userId)).toList();
  }
}
