package org.richardstallman.dvback.mock.coupon;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import lombok.extern.slf4j.Slf4j;
import org.richardstallman.dvback.domain.coupon.domain.CouponDomain;
import org.richardstallman.dvback.domain.coupon.repository.CouponRepository;

@Slf4j
public class FakeCouponRepository implements CouponRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<CouponDomain> data = new ArrayList<>();

  @Override
  public CouponDomain save(CouponDomain couponDomain) {
    if (couponDomain.getCouponId() == null || couponDomain.getCouponId() == 0) {
      CouponDomain savedData =
          CouponDomain.builder()
              .couponId(autoGeneratedId.incrementAndGet())
              .userDomain(couponDomain.getUserDomain())
              .chargeAmount(couponDomain.getChargeAmount())
              .couponName(couponDomain.getCouponName())
              .interviewMode(couponDomain.getInterviewMode())
              .interviewAssetType(couponDomain.getInterviewAssetType())
              .isUsed(couponDomain.isUsed())
              .isExpired(couponDomain.isExpired())
              .generatedAt(couponDomain.getGeneratedAt())
              .usedAt(couponDomain.getUsedAt())
              .expireAt(couponDomain.getExpireAt())
              .build();

      data.add(savedData);
      return savedData;
    }
    data.removeIf(item -> Objects.equals(item.getCouponId(), couponDomain.getCouponId()));
    data.add(couponDomain);
    return couponDomain;
  }

  @Override
  public CouponDomain findById(Long couponId) {
    return data.stream()
        .filter(item -> Objects.equals(item.getCouponId(), couponId))
        .findAny()
        .orElse(null);
  }

  @Override
  public List<CouponDomain> findSimpleListByUserId(Long userId) {
    return data.stream()
        .filter(item -> Objects.equals(item.getUserDomain().getUserId(), userId))
        .filter(item -> Objects.equals(item.isExpired(), false))
        .filter(item -> Objects.equals(item.isUsed(), false))
        .toList();
  }

  @Override
  public List<CouponDomain> findUsedListByUserId(Long userId) {
    return data.stream()
        .filter(item -> Objects.equals(item.getUserDomain().getUserId(), userId))
        .filter(item -> Objects.equals(item.isUsed(), true))
        .toList();
  }

  @Override
  public List<CouponDomain> findExpiredListByUserId(Long userId) {
    return data.stream()
        .filter(item -> Objects.equals(item.getUserDomain().getUserId(), userId))
        .filter(item -> Objects.equals(item.isExpired(), true))
        .toList();
  }
}
